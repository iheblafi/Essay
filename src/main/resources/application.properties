
### DATABASE create-drop ###
server.servlet.context-path=/cabinet
server.address=0.0.0.0
server.port=8085
spring.datasource.url=jdbc:mysql://localhost:3306/cabinet?useUnicode=true&useJDBCCompliantTimezoneShift=true&createDatabaseIfNotExist=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=
### JPA / HIBERNATE ##s#
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect








logging.level.root = info
# Logging pattern for the console
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %-5level- %logger{45} -%msg %n
#                                                           45 chars          retoure chariot   #
###logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss}){Green} - %-5level- %logger{45} -%msg %n


#Spring boot only logs to the console by default. In order to log into a file
logging.file.path=logs/
logging.file.name=${logging.file.path}/global.log
logging.logback.rollingpolicy.max-file=1MB
logging.logback.rollingpolicy.max-history=5


#Color-Coded Output
#If ANSI is supported by your terminal then color-coded log output can be seen in the console.\
#The following property can be set in the application.properties file to get the color-coded output:
spring.output.ansi.enabled=always














#spring.graphql.graphiql.enabled=true
#spring.graphql.graphiql.path=/graphiql


#spring.main.web-application-type=NONE
spring.main.lazy-initialization=true
#Lazy InitializationSpring Framework has support for lazy initialization. Lazy initialization means that Spring won't create all beans on startup. Also, Spring will inject no dependencies until that bean is needed. Since Spring Boot version 2.2. it's possible to enable lazy initialization using the application.properties:
#spring.jmx.enabled=false







##  LOGGING  ##
##Disable Spring Boot Banner at Startup
spring.main.banner-mode=off


#Console Output
#The log levels supported by Spring boot are TRACE,INFO,DEBUG,ERROR, and WARN. By default ERROR, INFO and WARN are printed to the console.
# It is possible to activate the debug and trace level by starting the application with ?debug flag or ?trace flag as follows:
#java -jar target/log-0.0.1-SNAPSHOT.jar ?debug
#java -jar target/log-0.0.1-SNAPSHOT.jar ?trace
#Alternatively, This can also be done by adding the following properties in the application.properties file.
#debug=true
